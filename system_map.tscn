[gd_scene load_steps=8 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://system_map.gd" type="Script" id=5]
[ext_resource path="res://resources/fonts/Roboto_Mono/RobotoMono-VariableFont_wght.ttf" type="DynamicFontData" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
uniform sampler2D star_positions;
uniform int stars_amount;
uniform vec2 shift = vec2(0.);
uniform float first_zone_range = 0.3;
uniform float second_zone_range = 0.6;
uniform float lighten_power = .1;
uniform float border_width = .05;
uniform float border_lighten_power = .1;
uniform vec4 first_zone_color: hint_color = vec4(0., 0., 1., .01);
uniform vec4 second_zone_color: hint_color = vec4(0., 1., .3, .01);

vec4 lighten(vec4 color, float power){
	vec4 missing_color = vec4(1.) - color;
	vec4 result = color + missing_color * power;
	return result;
}
vec4 mix_colors(vec4 first, vec4 second){
	vec4 result = first * (1. - second.a) + second;
	return result;
}

vec4 get_position_jump_and_scan_range(int star_index){
    vec4 tex = texelFetch(star_positions, ivec2(star_index, 0), 0);
	vec4 result = (tex - vec4(0.5)) * 2.0;
	return result;
}

vec4 get_color_for_zone(float range, float zone_range, vec4 zone_color){
	vec4 result = vec4(0);
	if (range < zone_range){
		float d_range = zone_range - range;
		result = zone_color;
		result = lighten(result, d_range * lighten_power);
		if (d_range < zone_range * border_width){
			result = lighten(result, border_lighten_power);
		}
	}
	return result;
}
vec4 get_color_for_zone2(float range, vec4 zone_color){
	vec4 result = vec4(0);
	if (range < 1.){
		float d_range = 1. - range;
		result = zone_color;
		result = lighten(result, d_range * lighten_power);
		if (d_range < 1. * border_width){
			result = lighten(result, border_lighten_power);
		}
	}
	return result;
}

void fragment(){
	COLOR = vec4(0.);

	vec2 uv = (UV - vec2(0.5)) * 2.;
	COLOR = vec4(0.);
	float min_range = 2.;
	float min_jump_range = 2.;
	float min_scan_range = 2.;
 	for(int i = 0; i < stars_amount; ++i){
		vec4 position_jump_and_scan_range = get_position_jump_and_scan_range(i);
		vec2 position = position_jump_and_scan_range.xy;
		float jump_range = position_jump_and_scan_range.z;
		if (jump_range > 0.){
			float current_jump_range = distance(uv, position + shift) / jump_range;
			min_jump_range = min(min_jump_range, current_jump_range);
		}
		float scan_range = position_jump_and_scan_range.a;
		if (scan_range > 0.){
			float current_scan_range = distance(uv, position + shift) / scan_range;
			min_scan_range = min(min_scan_range, current_scan_range);
		}
	}
	vec4 first_zone = get_color_for_zone2(min_jump_range, first_zone_color);
	vec4 second_zone = get_color_for_zone2(min_scan_range, second_zone_color);
	COLOR = mix_colors(second_zone, first_zone);
//	COLOR = mix_colors(first_zone, second_zone);
//	if (min_range < first_zone_range){
//		float d_range = first_zone_range - min_range;
//		COLOR = first_zone;
//		COLOR = lighten(COLOR, d_range * lighten_power);
//		if (d_range < first_zone_range * border_width){
//			COLOR = lighten(COLOR, border_lighten_power);
//		}
//	}
	COLOR = clamp(COLOR, vec4(0.), vec4(1.));
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/stars_amount = null
shader_param/shift = Vector2( 0, 0 )
shader_param/first_zone_range = 0.3
shader_param/second_zone_range = 0.6
shader_param/lighten_power = 0.1
shader_param/border_width = 0.05
shader_param/border_lighten_power = 0.1
shader_param/first_zone_color = Color( 0, 0, 1, 0.01 )
shader_param/second_zone_color = Color( 0, 1, 0.3, 0.01 )

[sub_resource type="DynamicFont" id=3]
size = 72
font_data = ExtResource( 6 )

[sub_resource type="DynamicFont" id=4]
size = 72
font_data = ExtResource( 6 )

[node name="system_map" type="Node2D"]
script = ExtResource( 5 )

[node name="base" type="Node2D" parent="."]
position = Vector2( 700, 450 )

[node name="root" type="Node2D" parent="base"]

[node name="marks" type="Node2D" parent="base/root"]

[node name="sprite" type="Sprite" parent="base/root/marks"]
material = SubResource( 2 )
scale = Vector2( 22, 22 )
texture = ExtResource( 1 )

[node name="planets" type="Node2D" parent="base/root"]

[node name="contols" type="MarginContainer" parent="."]
visible = false
margin_left = 900.0
margin_right = 1400.0
margin_bottom = 900.0
custom_constants/margin_right = 25
custom_constants/margin_top = 75
custom_constants/margin_left = 25
custom_constants/margin_bottom = 25
__meta__ = {
"_edit_use_anchors_": false
}

[node name="buttons" type="VBoxContainer" parent="contols"]
margin_left = 25.0
margin_top = 75.0
margin_right = 475.0
margin_bottom = 875.0
custom_constants/separation = 50
alignment = 1

[node name="buttons" type="Control" parent="."]
margin_left = 1000.0
margin_top = 490.0
margin_right = 1000.0
margin_bottom = 490.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="info" type="Control" parent="."]
margin_right = 40.0
margin_bottom = 40.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="title" type="Label" parent="info"]
modulate = Color( 1, 1, 1, 0 )
margin_left = 25.0
margin_top = 81.0
margin_right = 1000.0
margin_bottom = 177.0
custom_fonts/font = SubResource( 3 )
text = "Taurus IV"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="description" type="RichTextLabel" parent="info"]
modulate = Color( 1, 1, 1, 0 )
margin_left = 25.0
margin_top = 600.0
margin_right = 1000.0
margin_bottom = 875.0
focus_mode = 2
mouse_filter = 2
custom_fonts/normal_font = SubResource( 4 )
bbcode_enabled = true
bbcode_text = "Get some energy"
text = "Get some energy"
scroll_active = false
scroll_following = true
selection_enabled = true
__meta__ = {
"_edit_use_anchors_": false
}
