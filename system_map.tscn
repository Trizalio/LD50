[gd_scene load_steps=15 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://resources/shaders/star_shader_material.tres" type="Material" id=2]
[ext_resource path="res://resources/shaders/planet_shader_material.tres" type="Material" id=3]
[ext_resource path="res://planet.tscn" type="PackedScene" id=4]

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;
uniform vec4 base_color: hint_color = vec4(0., 0., 0., 1.);

void fragment(){
	COLOR.rgba = base_color;
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/base_color = Color( 0.0509804, 0.0627451, 0.0980392, 1 )

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;
uniform sampler2D noise;
uniform float border = .60;
uniform float power = 5.;
uniform float multipler = 100.;
uniform vec2 position_shift = vec2(0., 0.);

vec4 main(float time, vec2 uv){
	float factor = 1. / border;
	vec4 color = vec4(1., 1., 1., 1.);
	float value = (texture(noise, uv + position_shift).r - border) * factor;
	color.a = clamp(pow(value, power) * multipler, 0., 1.);
	return color;
}
float hide(float time, vec2 uv){
	float modificator = texture(noise, uv + time * 0.01).r;
	return pow(modificator, 3) * 0.5 + 0.1;
}

void fragment(){
	COLOR = main(TIME, UV);
}"

[sub_resource type="OpenSimplexNoise" id=12]
period = 4.0

[sub_resource type="NoiseTexture" id=13]
seamless = true
noise = SubResource( 12 )

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 11 )
shader_param/border = 0.6
shader_param/power = 5.0
shader_param/multipler = 1000.0
shader_param/position_shift = Vector2( 0, 0 )
shader_param/noise = SubResource( 13 )

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
uniform sampler2D noise;
uniform vec2 position_shift = vec2(0., 0.);
uniform vec4 base_color: hint_color = vec4(1.);

vec4 main(float time, vec2 uv){
	vec4 color = base_color;
	color.a = sin(time * 0.3 + texture(noise, uv).r * 15.) * 0.5 + 0.5;
	return color;
}

float hide(float time, vec2 uv){
	float modificator = texture(noise, uv + time * 0.01).r;
	return pow(modificator, 3) * 0.5 + 0.1;
}

void fragment(){
	COLOR = main(TIME, UV + position_shift);
	COLOR.a *= hide(TIME, UV + position_shift);
}"

[sub_resource type="OpenSimplexNoise" id=7]
seed = 100

[sub_resource type="NoiseTexture" id=8]
seamless = true
noise = SubResource( 7 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/position_shift = Vector2( 0, 0 )
shader_param/base_color = Color( 1, 1, 1, 1 )
shader_param/noise = SubResource( 8 )

[node name="system_map2" type="Node2D"]

[node name="background_black" type="Sprite" parent="."]
material = SubResource( 10 )
position = Vector2( 0, -251.587 )
scale = Vector2( 21.875, 21.875 )
texture = ExtResource( 1 )
centered = false

[node name="background_stars" type="Sprite" parent="."]
material = SubResource( 14 )
position = Vector2( 0, -251.587 )
scale = Vector2( 21.875, 21.875 )
texture = ExtResource( 1 )
centered = false

[node name="background_glow_white" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0.196078 )
material = SubResource( 2 )
position = Vector2( 0, -251.587 )
scale = Vector2( 21.875, 21.875 )
texture = ExtResource( 1 )
centered = false

[node name="root" type="Node2D" parent="."]
position = Vector2( 652.138, 434.758 )

[node name="star" type="Sprite" parent="root"]
material = ExtResource( 2 )
scale = Vector2( 4, 4 )
texture = ExtResource( 1 )

[node name="mars" type="Sprite" parent="root"]
material = ExtResource( 3 )
position = Vector2( 196.838, 139.504 )
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )

[node name="planet" parent="root" instance=ExtResource( 4 )]
position = Vector2( -63.4048, 202.228 )
