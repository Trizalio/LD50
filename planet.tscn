[gd_scene load_steps=17 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://resources/shaders/planet.shader" type="Shader" id=2]
[ext_resource path="res://planet.gd" type="Script" id=3]
[ext_resource path="res://resources/shaders/star_shader_material.tres" type="Material" id=4]
[ext_resource path="res://resources/fonts/font_64.tres" type="DynamicFont" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
uniform sampler2D noise;

uniform vec4 main_color: hint_color = vec4(1., 1., 1., 1.);
uniform vec4 selection_color: hint_color = vec4(0.5, 0.5, .0, .6);
uniform float size = 0.5;
uniform float glow_power = .006;
uniform float selection_width = 0.08;
uniform float selection_gap = 0.0;
uniform float rotation_speed = 0.1;
uniform vec2 seed = vec2(0.);
const float inner_part = 0.9;
const float inner_alpha = 0.9;
const float M_PI = atan(1.) * 4.;
const float M_2_PI = M_PI * 2.;
const float M_PI_2 = M_PI / 2.;

vec4 lighten(vec4 color, float power){
	vec4 missing_color = vec4(1.) - color;
	vec4 result = color + missing_color * power;
	return result;
}

float get_normalised_squere_angle(float x, float y, float time){
	float b_angle = atan(x, y) + time * 0.3;
	while (b_angle > .0){
		b_angle -= M_PI_2;
	}
	while (b_angle < .0){
		b_angle += M_PI_2;
	}
	float n_angle = b_angle / M_PI_2;
	return n_angle;
}

void fragment(){
	float ax = UV.x;
	float ay = UV.y;
	float x = ax - 0.5;
	float y = ay - 0.5;
	COLOR.rgb = vec3(0);
	float radius = size / 15.;
	float outer_radius = radius;
	float selection_from = (outer_radius + selection_gap - selection_width / 2.);
	float selection_to = (outer_radius + selection_gap + selection_width / 2.);
	float norm_x = clamp(x / radius * 4., -1, 1);
	float height = cos(asin(norm_x));
	float fy = y;
	float fx = x;
	float height2 = cos(abs(fx * 3.14));
	float base = sqrt(fx*fx + fy*fy) / 3.;
	float base2 = base * 3.;
	
	float n_angle = get_normalised_squere_angle(x, y, -TIME * rotation_speed * 5.);
	float range_from_border = 0.5 - min(abs(n_angle - 0.5), abs(0.5 - n_angle));
	float fade = pow(range_from_border * 2., .5);
	float power = texture(noise, seed + vec2(n_angle * 0.3) + TIME * rotation_speed).r * fade * 0.4;
	power = pow(power * 3., 1.) * 0.3;
//	power = pow(power * 4., 2.) * 0.3;
//	outer_radius += power * 0.01;
	
	float value = (texture(noise, UV + TIME * 0.1).r) * 0.01;
	base += value;
	COLOR.rgba = vec4(.0);
	if (base > outer_radius){
		COLOR.rgba = main_color.rgba;
		COLOR.a -= clamp(pow(base - outer_radius, 1.) / glow_power, 0., 1.) ;

		if (base > selection_from && base < selection_to){
			float selection_power = pow(min(base-selection_from, selection_to-base) / selection_width, 2.) * 4.;
			COLOR = mix(COLOR, selection_color, selection_power);
		}
	} else {
		COLOR.rgba = main_color.rgba;
		float inner_radius = radius * inner_part;
		COLOR = lighten(COLOR, (1. - base / inner_radius) * 2.)
//		if (base < inner_radius ){
//			COLOR = lighten(COLOR, 0.5)
////			COLOR.a *= 0.8;
//		}else{
//		}

	}

	if (base2 < power * radius * 80.){
		float brightness = power - base2;
		COLOR = lighten(COLOR, brightness * 10.)
	}
//	COLOR.r = power;
//	COLOR.r = pow(power, 2.);
//	COLOR.r = pow(power, 2.) - base * 4.;
//	if (angle < 0.){
//		COLOR.r = 1.0;
//	}
//	if (angle < -1.57){
//		COLOR.g = 1.0;
//	}
//	if (angle > 1.57){
//		COLOR.b = 1.0;
//	}
	
	COLOR = clamp(COLOR, vec4(0.), vec4(1.));
}"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/main_color = Color( 0.996078, 1, 0.54902, 1 )
shader_param/selection_color = Color( 0.5, 0.5, 0, 0.6 )
shader_param/size = 0.2
shader_param/glow_power = 0.02
shader_param/selection_width = 0.08
shader_param/selection_gap = 0.0
shader_param/rotation_speed = 0.1
shader_param/seed = Vector2( 0, 0 )
shader_param/noise = SubResource( 3 )

[sub_resource type="OpenSimplexNoise" id=5]
period = 8.0

[sub_resource type="NoiseTexture" id=6]
width = 256
height = 256
seamless = true
noise = SubResource( 5 )

[sub_resource type="ShaderMaterial" id=7]
shader = ExtResource( 2 )
shader_param/main_color_reflectivness = 0.8
shader_param/second_color_reflectivness = 0.3
shader_param/ice_color_reflectivness = 0.7
shader_param/main_color = Color( 0, 0.501961, 0.635294, 1 )
shader_param/second_color = Color( 0.027451, 0.329412, 0, 1 )
shader_param/polar_ice_color = Color( 0.8, 0.8, 0.8, 1 )
shader_param/atmosphere_color = Color( 0.176471, 0.262745, 0.427451, 0.180392 )
shader_param/selection_color = Color( 0.5, 0.5, 0, 0.6 )
shader_param/selection_width = 0.08
shader_param/selection_gap = 0.0
shader_param/rotation_speed = 0.1
shader_param/seed = Vector2( 0.103, -0.39 )
shader_param/size = 0.246
shader_param/striping = 1.5
shader_param/ice_amount = 0.405
shader_param/main_and_second_colors_mixing = 0.1
shader_param/main_and_second_colors_distribution = 0.5
shader_param/noise = SubResource( 6 )

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;

const float M_PI = atan(1.) * 4.;
const float M_2_PI = M_PI * 2.;
const float M_PI_2 = M_PI / 2.;
const float circle_center_range = 0.15;
const float circle_size = 0.05;
const float circle_speed = 1.5;


vec4 lighten(vec4 color, float power){
	vec4 missing_color = vec4(1.) - color;
	vec4 result = color + missing_color * power;
	return result;
}
vec4 darken(vec4 color, float power){
	vec4 result = color;
	result.rgb *= 1. - power;
	return result;
}

float abs_angle_diff(float first_angle, float second_angle){
	float angle = abs(first_angle - second_angle);
	while (angle > M_PI){
		angle -= M_2_PI;
	}
	while (angle < -M_PI){
		angle += M_2_PI;
	}
	return abs(angle);
}

void fragment(){
	COLOR = vec4(0.);
	float current_angle = TIME * circle_speed;
	vec2 center_position = vec2(sin(current_angle) * circle_center_range, cos(current_angle) * circle_center_range);
	vec2 uv = UV - center_position - vec2(0.5);
	float range = length(uv);
	float range_from_border = (circle_size - range) / circle_size;
	float range_to_border = 1. - range_from_border;
	if (range_from_border > 0.){
		COLOR = vec4(1.);
		COLOR = darken(COLOR, range_to_border);
		COLOR.a = range_from_border;
	}
	
}
//void fragment(){
//	COLOR = vec4(0.);
//	vec2 uv = UV - vec2(0.5);
//	float range = length(uv);
//	float current_angle = TIME;
//	float angle = atan(uv.y, uv.x);
//	float angle_diff = abs_angle_diff(current_angle, angle);
//	if (angle_diff < 0.2 && range < 0.5 && range > 0.3){
//		COLOR = vec4(1.);
//	}
//
//}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )

[sub_resource type="OpenSimplexNoise" id=10]

[sub_resource type="NoiseTexture" id=11]
width = 100
height = 100
noise = SubResource( 10 )

[node name="planet" type="Node2D"]
script = ExtResource( 3 )

[node name="ustar_sprite" type="Sprite" parent="."]
visible = false
material = SubResource( 4 )
texture = ExtResource( 1 )

[node name="planet_sprite" type="Sprite" parent="."]
visible = false
material = SubResource( 7 )
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )

[node name="star_sprite" type="Sprite" parent="."]
visible = false
material = ExtResource( 4 )
scale = Vector2( 4, 4 )
texture = ExtResource( 1 )

[node name="ship" type="Sprite" parent="."]
visible = false
material = SubResource( 9 )
texture = SubResource( 11 )

[node name="tween" type="Tween" parent="."]

[node name="ustar_labels" type="VBoxContainer" parent="."]
margin_left = -64.0
margin_top = -64.0
margin_right = 576.0
margin_bottom = 576.0
rect_scale = Vector2( 0.2, 0.2 )
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MarginContainer" type="MarginContainer" parent="ustar_labels"]
margin_right = 640.0
margin_bottom = 550.0
mouse_filter = 2
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="center" type="CenterContainer" parent="ustar_labels"]
margin_top = 554.0
margin_right = 640.0
margin_bottom = 640.0
mouse_filter = 2

[node name="name" type="Label" parent="ustar_labels/center"]
margin_left = 206.0
margin_right = 434.0
margin_bottom = 86.0
size_flags_horizontal = 0
custom_fonts/font = ExtResource( 5 )
custom_colors/font_color = Color( 0.6, 0.6, 0.6, 1 )
text = "Arctur"
align = 1

[node name="button" type="Button" parent="."]
margin_left = -50.0
margin_top = -50.0
margin_right = 50.0
margin_bottom = 50.0
focus_mode = 0
enabled_focus_mode = 0
flat = true
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="mouse_entered" from="button" to="." method="_on_mouse_entered"]
[connection signal="mouse_exited" from="button" to="." method="_on_mouse_exited"]
[connection signal="pressed" from="button" to="." method="_on_Button_pressed"]
