[gd_scene load_steps=6 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://science.gd" type="Script" id=2]
[ext_resource path="res://research.tscn" type="PackedScene" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
uniform sampler2D researches;
uniform sampler2D research_connections;
uniform int researches_amount = -1;
uniform vec2 shift = vec2(0.);
uniform float scale = 1.0;

uniform float circle_outer_size = .05;
uniform float circle_inner_size = .03;
//uniform float first_zone_range = 0.3;
//uniform float second_zone_range = 0.6;
//uniform float lighten_power = .1;
//uniform float border_width = .05;
//uniform float border_lighten_power = .1;
uniform vec4 first_zone_color: hint_color = vec4(0., 0., 1., .01);
uniform vec4 second_zone_color: hint_color = vec4(0., 1., .3, .01);

const float M_PI = atan(1.) * 4.;
const float M_2_PI = M_PI * 2.;
const float M_PI_2 = M_PI / 2.;

vec4 lighten(vec4 color, float power){
	vec4 missing_color = vec4(1.) - color;
	vec4 result = color + missing_color * power;
	return result;
}
vec4 mix_colors(vec4 first, vec4 second){
	vec4 result = first * (1. - second.a) + second;
	return result;
}

vec4 get_position_discovering_and_selection(int index){
	if (researches_amount == -1){
		if (index == 0){return vec4(0.);}
		else if (index == 1){return vec4(0.3, 0.3, 0.0, 0.2);}
		else if (index == 2){return vec4(-0.3, 0.3, 0.0, 0.2);}
	}
    vec4 tex = texelFetch(researches, ivec2(index, 0), 0);
	vec4 result = (tex - vec4(0.5)) * 2.0;
	return result;
}
bool is_connected(int i, int j){
	if (researches_amount == -1){
		if (i == j){return false;}
		if (i == 1 && j == 0){return true;}
		if (i == 2 && j == 0){return false;}
		if (i == 2 && j == 1){return true;}
	}
    vec4 tex = texelFetch(research_connections, ivec2(i, j), 0);
	bool result = tex.r > 0.5;
	return result;
}

float abs_angle_diff(float first_angle, float second_angle){
	float angle = abs(first_angle - second_angle);
	while (angle > M_PI){
		angle -= M_2_PI;
	}
	while (angle < -M_PI){
		angle += M_2_PI;
	}
	return abs(angle);
}

float get_range_from_border(vec2 frag_coord){
	vec2 local = frag_coord.xy - vec2(0.5);
	return 1. - max(abs(local.y), abs(local.x)) * 2.;
}

const float width = 0.5;
float get_range_from_line(vec2 uv, vec2 uv1, vec2 uv2){
	float uv_uv1 = distance(uv, uv1);
	float uv_uv2 = distance(uv, uv2);
	float uv1_uv2 = distance(uv1, uv2);
	
	float numerator = abs((uv2.y - uv1.y) * uv.x - (uv2.x - uv1.x) * uv.y + uv2.x * uv1.y - uv2.y * uv1.x);
	float line_length = uv1_uv2;
	float range_from_line = numerator / line_length;
	float min_range_from_points = min(uv_uv1, uv_uv2);
	float max_range_from_points = max(uv_uv1, uv_uv2);
	
	float normalised_range = range_from_line;
	if (max_range_from_points > uv1_uv2){
		normalised_range = min_range_from_points;
	}
	normalised_range *= 100. / width;
//	float normalised_range = max(range_from_line, min_range_from_points) / width * 100.;
	return normalised_range;
}

const vec2 null_vec2 = vec2(3.);
void fragment(){
	COLOR = vec4(0.);
	vec2 uv = (UV - vec2(0.5)) * 2. - shift;
	int amount = researches_amount;
	if (researches_amount == -1){
		amount = 3;
	}
	COLOR = vec4(vec3(0.), 1.);
//	float min_distance = 2.;
//	float second_min_distance = 2.;
//	vec2 closest_research_position = null_vec2;
//	vec2 second_closest_research_position = null_vec2;
// 	for(int i = 0; i < amount; ++i){
//		vec4 position_discovering_and_selection = get_position_discovering_and_selection(i);
//		vec2 position = position_discovering_and_selection.xy;
//		float distance_to_research = distance(position, uv);
//		if (distance_to_research < min_distance){
//			second_min_distance = min_distance;
//			min_distance = distance_to_research;
//			second_closest_research_position = closest_research_position;
//			closest_research_position = position;
//		}else if (distance_to_research < second_min_distance){
//			second_min_distance = distance_to_research;
//			second_closest_research_position = position;
//		}
//	}
//	COLOR.b = (1. - second_min_distance) * (1. - min_distance);
	
//	vec2 uv1 = closest_research_position;
//	vec2 uv2 = second_closest_research_position;
////	COLOR.r = second_min_distance;
////	COLOR.g = min_distance;
//
//	float width = 0.5;
//	float numerator = abs((uv2.y - uv1.y) * uv.x - (uv2.x - uv1.x) * uv.y + uv2.x * uv1.y - uv2.y * uv1.x);
//	float line_length = distance(uv1, uv2);
//	float range = numerator / line_length;
//	float normalised_range = range / width * 100.;
	
	float min_range = 3.;
 	for(int k = 0; k < amount; ++k){
		vec4 position_discovering_and_selection = get_position_discovering_and_selection(k);
		min_range = min(min_range, distance(uv, position_discovering_and_selection.xy));
	}
	
	if (min_range < circle_inner_size){
		COLOR.r = .5;
	}else if (min_range < circle_outer_size){
		COLOR.r = 1.;
	}else{
 		for(int i = 0; i < amount; ++i){
//			COLOR.b = 1.;
	 		for(int j = i + 1; j < amount; ++j){
				if (is_connected(j, i)){
					vec2 start = get_position_discovering_and_selection(i).xy;
					vec2 end = get_position_discovering_and_selection(j).xy;
					float normalised_range = get_range_from_line(uv, start, end);
					if (normalised_range < 1.01){
						COLOR.g = 1.;
					}
				}
			}
		}
	}

//	float normalised_range = get_range_from_line(uv, closest_research_position, second_closest_research_position);
//
//	if (normalised_range < 1.01){
//		COLOR.g = 1.;
//	}
	COLOR = clamp(COLOR, vec4(0.), vec4(1.));
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/researches_amount = -1
shader_param/shift = Vector2( 0, 0 )
shader_param/scale = 1.0
shader_param/circle_outer_size = 0.05
shader_param/circle_inner_size = 0.03
shader_param/first_zone_color = Color( 0, 0, 1, 0.01 )
shader_param/second_zone_color = Color( 0, 1, 0.3, 0.01 )

[node name="science" type="Node2D"]
position = Vector2( 700, 450 )
script = ExtResource( 2 )

[node name="sprite" type="Sprite" parent="."]
material = SubResource( 2 )
scale = Vector2( 22, 22 )
texture = ExtResource( 1 )

[node name="buttons" type="Node2D" parent="."]

[node name="research" parent="buttons" instance=ExtResource( 3 )]
